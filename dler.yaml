proxy-providers:
  YZT:
    type: http
    url: "https://sub.yztcloud.cc/getnodeinfo?token=63b704a74dedaf27ff61f0405196d75f"
    exclude-filter: "每天"
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 86400

mode: rule
ipv6: true
log-level: info
allow-lan: true
mixed-port: 7890
unified-delay: true
tcp-concurrent: true
geodata-mode: true
keep-alive-interval: 15
find-process-mode: strict
global-client-fingerprint: chrome
external-controller: 127.0.0.1:9090

profile:
  store-selected: true
  store-fake-ip: true

dns:
  enable: true
  ipv6: true
  listen: 0.0.0.0:53
  enhanced-mode: fake-ip
  nameserver:
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query
  fake-ip-filter:
    - "*.lan"
    - "*.localdomain"
    - "*.example"
    - "*.invalid"
    - "*.localhost"
    - "*.test"
    - "*.local"
    - "*.home.arpa"
    - "time.*.com"
    - "time.*.gov"
    - "time.*.edu.cn"
    - "time.*.apple.com"
    - "time1.*.com"
    - "time2.*.com"
    - "time3.*.com"
    - "time4.*.com"
    - "time5.*.com"
    - "time6.*.com"
    - "time7.*.com"
    - "ntp.*.com"
    - "ntp1.*.com"
    - "ntp2.*.com"
    - "ntp3.*.com"
    - "ntp4.*.com"
    - "ntp5.*.com"
    - "ntp6.*.com"
    - "ntp7.*.com"
    - "*.time.edu.cn"
    - "*.ntp.org.cn"
    - "+.pool.ntp.org"
    - "time1.cloud.tencent.com"
    - "music.163.com"
    - "*.music.163.com"
    - "*.126.net"
    - "*.msftconnecttest.com"
    - "*.msftncsi.com"
    - "msftconnecttest.com"
    - "msftncsi.com"
    - "localhost.ptlogin2.qq.com"
    - "localhost.sec.qq.com"
    - "stun.*.*"
    - "stun.*.*.*"
    - "+.stun.*.*"
    - "+.stun.*.*.*"
    - "+.stun.*.*.*.*"
    - "mesu.apple.com"
    - "swscan.apple.com"
    - "swquery.apple.com"
    - "swdownload.apple.com"
    - "swcdn.apple.com"
    - "swdist.apple.com"
    - "lens.l.google.com"
    - "stun.l.google.com"
    - "+.nflxvideo.net"

sniffer:
  enable: true
  parse-pure-ip: true
  sniff:
    {
      HTTP: { ports: [80, 8080-8880] },
      TLS: { ports: [443, 8443] },
      QUIC: { ports: [443, 8443] },
    }
  force-domain:
    - +.v2ex.com
    - google.com
  skip-domain: ["Mijia Cloud", "dlg.io.mi.com", "+.apple.com"]

tun:
  enable: true
  stack: mixed
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

proxy-groups:
  - {
      name: Proxy,
      type: select,
      proxies:
        [
          Select,
          IEPL,
          Home,
          Direct,
          HongKong,
          TaiWan,
          Japan,
          Singapore,
          USA,
          DIRECT,
        ],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Proxy.png,
    }
  - {
      name: Select,
      type: select,
      include-all-providers: true,
      icon: https://fastly.jsdelivr.net/gh/shindgewongxj/WHATSINStash@master/icon/select.png,
    }
  - {
      name: IEPL,
      type: select,
      include-all-providers: true,
      filter: "(?i)IEPL",
      tolerance: 10,
      lazy: true,
      icon: https://fastly.jsdelivr.net/gh/shindgewongxj/WHATSINStash@master/icon/fallback.png,
    }
  - {
      name: Home,
      type: select,
      include-all-providers: true,
      filter: "(?i)家宽",
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Back.png,
    }
  - {
      name: Direct,
      type: select,
      include-all-providers: true,
      filter: "(?i)直连",
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Direct.png,
    }

  - {
      name: Final,
      type: select,
      proxies: [Proxy, DIRECT],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Final.png,
    }

  - {
      name: AI,
      type: select,
      proxies: [Japan, HongKong],
      icon: https://fastly.jsdelivr.net/gh/shindgewongxj/WHATSINStash@master/icon/openai.png,
    }
  - {
      name: Apple,
      type: select,
      proxies: [DIRECT, Proxy],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Apple.png,
    }
  - {
      name: Google FCM,
      type: select,
      proxies: [DIRECT, Proxy],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Google_Search.png,
    }
  - {
      name: Microsoft,
      type: select,
      proxies: [DIRECT, Proxy],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Microsoft.png,
    }
  - {
      name: Samsung,
      type: select,
      proxies: [DIRECT, Proxy],
      icon: https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Samsung_icon.svg/238px-Samsung_icon.svg.png,
    }
  - {
      name: Telegram,
      type: select,
      proxies: [Proxy, Select],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Telegram.png,
    }
  - {
      name: Game,
      type: select,
      proxies: [DIRECT, Proxy],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Game.png,
    }
  - {
      name: Streaming,
      type: select,
      proxies: [Proxy, DIRECT, HongKong, USA],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/YouTube.png,
    }
  - {
      name: Global,
      type: select,
      proxies: [Proxy, DIRECT],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Global.png,
    }
  - {
      name: Domestic,
      type: select,
      proxies: [DIRECT, Proxy],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Domestic.png,
    }

  # 地区分组
  - {
      name: HongKong,
      type: fallback,
      include-all-providers: true,
      filter: "(?i)港|hk",
      lazy: true,
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hong_Kong.png,
    }
  - {
      name: TaiWan,
      type: fallback,
      include-all-providers: true,
      filter: "(?i)台|tw",
      disable-udp: true,
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Taiwan.png,
    }
  - {
      name: Japan,
      type: fallback,
      include-all-providers: true,
      filter: "(?i)日|jp",
      lazy: true,
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Japan.png,
    }
  - {
      name: Singapore,
      type: fallback,
      include-all-providers: true,
      filter: "(?i)(新加坡|sg)",
      lazy: true,
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Singapore.png,
    }
  - {
      name: USA,
      type: fallback,
      include-all-providers: true,
      filter: "(?i)美|us",
      lazy: true,
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_States.png,
    }

rules:
  - RULE-SET, Reject, REJECT
  - RULE-SET, Special, DIRECT

  - RULE-SET, Apple Music, Apple
  - RULE-SET, Apple, Apple

  - RULE-SET, Google FCM, Google FCM
  - RULE-SET, Microsoft, Microsoft
  - RULE-SET, AI Suite, AI
  - RULE-SET, Steam, Game

  - RULE-SET, Telegram, Telegram

  - RULE-SET, Netflix, Streaming
  - RULE-SET, Disney Plus, Streaming
  - RULE-SET, YouTube, Streaming
  - RULE-SET, Spotify, Streaming

  - RULE-SET, PROXY, Global

  - RULE-SET, Domestic, Domestic
  - RULE-SET, Domestic IPs, Domestic

  - RULE-SET, LAN, DIRECT
  - GEOIP, CN, Domestic
  - MATCH, Final

script:
  code: |
    def main(ctx, metadata):
        ruleset_action = {
            'Reject': 'REJECT',
            'Special': 'DIRECT',
            'Apple Music': 'Apple',
            'Apple': 'Apple',
            'Telegram': 'Telegram',
            'Google FCM': 'Google FCM',
            'Microsoft': 'Microsoft',
            'Samsung': 'Samsung",
            'AI Suite': 'AI Suite',
            'Steam': 'Steam',
            'Netflix': 'Streaming',
            'Disney Plus': 'Streaming',
            'YouTube': 'Streaming',
            'Spotify': 'Streaming',
            'PROXY': 'Global',
            'Domestic': 'Domestic',
            'Domestic IPs': 'Domestic',
            'LAN': 'DIRECT'
          }

        port = int(metadata['dst_port'])

        if metadata['network'] == 'UDP' and port == 443:
            ctx.log('[Script] matched QUIC traffic use reject')
            return 'REJECT'

        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 3389, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        if port not in port_list:
            ctx.log('[Script] not common port use direct')
            return 'DIRECT'

        if metadata['dst_ip'] == '':
            metadata['dst_ip'] = ctx.resolve_ip(metadata['host'])

        for ruleset in ruleset_action:
            if ctx.rule_providers[ruleset].match(metadata):
                return ruleset_action[ruleset]

        if metadata['dst_ip'] != '':
            code = ctx.geoip(metadata['dst_ip'])
            if code == 'CN':
                ctx.log('[Script] Geoip CN')
                return 'Domestic'

        ctx.log('[Script] FINAL')
        return 'Final'

rule-providers:
  Reject:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Reject.yaml"
    path: ./Rules/Reject
    interval: 86400
  Special:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Special.yaml"
    path: ./Rules/Special
    interval: 86400
  PROXY:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Proxy.yaml"
    path: ./Rules/Proxy
    interval: 86400
  Domestic:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Domestic.yaml"
    path: ./Rules/Domestic
    interval: 86400
  Domestic IPs:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Domestic%20IPs.yaml"
    path: ./Rules/Domestic_IPs
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/LAN.yaml"
    path: ./Rules/LAN
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Media/Netflix.yaml"
    path: ./Rules/Media/Netflix
    interval: 86400
  Spotify:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Media/Spotify.yaml"
    path: ./Rules/Media/Spotify
    interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Media/YouTube.yaml"
    path: ./Rules/Media/YouTube
    interval: 86400
  Apple Music:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Media/Apple%20Music.yaml"
    path: ./Rules/Media/Apple_Music
    interval: 86400
  Disney Plus:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Media/Disney%20Plus.yaml"
    path: ./Rules/Media/Disney_Plus
    interval: 86400
  Telegram:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Telegram.yaml"
    path: ./Rules/Telegram
    interval: 86400
  Steam:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Steam.yaml"
    path: ./Rules/Steam
    interval: 86400
  Microsoft:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Microsoft.yaml"
    path: ./Rules/Microsoft
    interval: 86400
  AI Suite:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/AI%20Suite.yaml"
    path: ./Rules/AI Suite
    interval: 86400
  Apple:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Apple.yaml"
    path: ./Rules/Apple
    interval: 86400
  Google FCM:
    type: http
    behavior: classical
    url: "https://testingcf.jsdelivr.net/gh/dler-io/Rules@main/Clash/Provider/Google%20FCM.yaml"
    path: ./Rules/Google FCM
    interval: 86400
  Samsung:
    type: http
    behavior: classical
    path: ./rules/Samsung.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Samsung/Samsung.yaml"
    interval: 86400
