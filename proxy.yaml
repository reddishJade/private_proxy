# 订阅更新以及延迟测试配置
p: &p {
    type: http,
    interval: 3600, # 订阅更新间隔时间，单位为秒
    health-check: {
        enable: true, # 启用健康检查
        url: http://www.apple.com/library/test/success.html, # 健康检查URL
        interval: 300, # 健康检查间隔时间，单位为秒
      },
  }

# 订阅提供者配置
proxy-providers:
  provider:
    <<: *p
    url: "xxxxx"

ipv6: true # 启用IPv6支持
allow-lan: true # 允许局域网访问
mixed-port: 7890 # 混合端口
unified-delay: false # 不统一延迟
tcp-concurrent: true # 启用TCP并发连接
external-controller: 127.0.0.1:9090 # 外部控制器地址和端口
external-ui: ui # 外部UI目录
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip" # 外部UI下载地址

find-process-mode: strict # 进程查找模式设为严格
global-client-fingerprint: chrome # 全局客户端指纹设置为Chrome

profile:
  store-selected: true # 存储选定的配置
  store-fake-ip: true # 存储假IP

# 嗅探器配置
sniffer:
  enable: true # 启用嗅探器
  sniff:
    HTTP:
      ports: [80, 8080-8880] # HTTP嗅探端口范围
      override-destination: true # 覆盖目标地址
    TLS:
      ports: [443, 8443] # TLS嗅探端口
    QUIC:
      ports: [443, 8443] # QUIC嗅探端口
  skip-domain:
    - "Mijia Cloud" # 跳过的域名

# TUN模式配置
tun:
  enable: true # 启用TUN模式
  stack: mixed # 混合协议栈
  dns-hijack:
    - "any:53" # 劫持DNS端口
  auto-route: true # 自动路由
  auto-detect-interface: true # 自动检测网络接口

# DNS配置
dns:
  enable: true # 启用DNS
  listen: :1053 # DNS监听端口
  ipv6: true # 启用IPv6
  enhanced-mode: fake-ip # 增强模式设置为假IP
  fake-ip-range: 28.0.0.1/8 # 假IP范围
  fake-ip-filter:
    - "*" # 过滤所有域名
    - "+.lan" # 过滤局域网域名
    - "+.local" # 过滤本地域名
  default-nameserver:
    - 223.5.5.5 # 默认DNS服务器
  nameserver:
    - https://doh.pub/dns-query # DoH服务器
    - https://dns.alidns.com/dns-query # 阿里DNS服务器
  proxy-server-nameserver:
    - https://doh.pub/dns-query # 代理服务器使用的DoH服务器
  nameserver-policy:
    "rule-set:cn_domain,private":
      - https://doh.pub/dns-query
      - https://dns.alidns.com/dns-query
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query#dns"
      - "https://dns.google/dns-query#dns"
# 代理
proxies:
  - name: "Direct"
    type: direct
    udp: true

# 代理组
proxy-groups:
  - {
      name: Proxy,
      type: select,
      proxies:
        [
          自动选择,
          Direct,
          香港节点,
          台湾节点,
          日本节点,
          新加坡节点,
          美国节点,
          其它地区,
          手动选择,
        ],
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Rocket.png,
    }

  - {
      name: 手动选择,
      type: select,
      include-all-providers: true,
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Domestic.png,
    }

  - {
      name: 自动选择,
      type: url-test,
      include-all-providers: true,
      tolerance: 10,
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Auto.png,
    }

  - {
      name: Telegram,
      type: select,
      proxies: [手动选择, DIRECT],
      icon: https://clash-verge-rev.github.io/assets/icons/telegram.svg,
    }

  - {
      name: 漏网之鱼,
      type: select,
      proxies: [Proxy, DIRECT],
      icon: https://clash-verge-rev.github.io/assets/icons/fish.svg,
    }

  #地区分组
  - {
      name: 香港节点,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)港|hk|hongkong|hong kong",
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hong_Kong.png,
    }
  - {
      name: 台湾节点,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)台|tw|taiwan",
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Taiwan.png,
    }
  - {
      name: 日本节点,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)日|jp|japan",
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Japan.png,
    }
  - {
      name: 新加坡节点,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)(新|sg|singapore)",
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Singapore.png,
    }
  - {
      name: 美国节点,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)美|us|unitedstates|united states",
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_States.png,
    }
  - {
      name: 其它地区,
      type: select,
      include-all-providers: true,
      filter: "(?i)^(?!.*(?:🇭🇰|🇯🇵|🇺🇸|🇸🇬|🇨🇳|港|hk|hongkong|台|tw|taiwan|日|jp|japan|新|sg|singapore|美|us|unitedstates)).*",
      icon: https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Global.png,
    }

rules:
  - RULE-SET,applications,DIRECT
  - DOMAIN,clash.razord.top,DIRECT
  - DOMAIN,yacd.haishan.me,DIRECT
  - RULE-SET,private,DIRECT
  - RULE-SET,reject,REJECT
  - RULE-SET,icloud,DIRECT
  - RULE-SET,apple,DIRECT
  - RULE-SET,google,Proxy
  - RULE-SET,proxy,Proxy
  - RULE-SET,direct,DIRECT
  - RULE-SET,lancidr,DIRECT
  - RULE-SET,cncidr,DIRECT
  - RULE-SET,telegramcidr,Proxy
  - GEOIP,LAN,DIRECT
  - GEOIP,CN,DIRECT
  - MATCH,Proxy

rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: yaml }
  domain:
    &domain { type: http, interval: 86400, behavior: domain, format: yaml }

rule-providers:
  cn_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.yaml"

  geolocation-!cn:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.yaml"

  reject:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"
    path: ./ruleset/reject.yaml
    interval: 86400

  icloud:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt"
    path: ./ruleset/icloud.yaml
    interval: 86400

  apple:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt"
    path: ./ruleset/apple.yaml
    interval: 86400

  google:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt"
    path: ./ruleset/google.yaml
    interval: 86400

  proxy:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"
    path: ./ruleset/proxy.yaml
    interval: 86400

  direct:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"
    path: ./ruleset/direct.yaml
    interval: 86400

  private:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"
    path: ./ruleset/private.yaml
    interval: 86400

  gfw:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"
    path: ./ruleset/gfw.yaml
    interval: 86400

  tld-not-cn:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt"
    path: ./ruleset/tld-not-cn.yaml
    interval: 86400

  telegramcidr:
    type: http
    behavior: ipcidr
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"
    path: ./ruleset/telegramcidr.yaml
    interval: 86400

  cncidr:
    type: http
    behavior: ipcidr
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"
    path: ./ruleset/cncidr.yaml
    interval: 86400

  lancidr:
    type: http
    behavior: ipcidr
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"
    path: ./ruleset/lancidr.yaml
    interval: 86400

  applications:
    type: http
    behavior: classical
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"
    path: ./ruleset/applications.yaml
    interval: 86400
