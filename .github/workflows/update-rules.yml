name: update rules

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 设置Python 3.10 并启用缓存
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      # 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 运行rule_merger.py
      - name: Run rule merger
        run: |
          cd src/python
          python rule_merger.py

      # 只保留新生成的规则文件
      - name: Clean up old rules
        run: |
          cd src/python
          rm -rf output/*
          mv output/* ../../output/

      # 获取当前时间
      - name: Get current time
        id: time
        run: echo "time=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      # 提交规则文件到release分支
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add output/
          git commit -m "Update rules: ${{ steps.time.outputs.time }}"
          
          # 获取所有分支信息
          git fetch origin
          
          # 检查release分支是否存在于远程
          if git ls-remote --heads origin release | grep release; then
            # 如果存在，切换到release分支并强制更新
            git checkout release
            git reset --hard origin/release
          else
            # 如果不存在，创建新的release分支
            git checkout -b release
          fi
          
          # 应用最新的更改
          git cherry-pick main
          
          # 强制推送到release分支，确保更新
          git push -f origin release

      # 删除旧的workflow runs
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 3
